<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style type="text/css">
        .node { }
        .link { stroke: #999; stroke-opacity: .3; }
                                                            
    </style>
</head>
<body>
    <p style="color:black;">Note: darker nodes correspond to lower function values.</p>
    <p style="color:black;">Wallet: <i style="color:black;" class="nodeInfo"></i></p>    
    <p style="color:black;">Link info: <i style="color:black;" class="linkInfo"></i></p>

    <button class="btn btn-default" onclick="linkSelector()">Links</button>
    <button class="btn btn-default" onclick="nodeSelector()">Nodes</button>

<svg width="1400" height="700"></svg>

<script src="http://d3js.org/d3.v4.min.js" type="text/javascript"></script>
<script src="http://d3js.org/d3-selection-multi.v1.js"></script>


<script type="text/javascript">
    var uuid = <%= uuid %>;
    uuid = uuid.toString();
    var radius = 7;
    var linkStatus = 0;
    var nodeStatus = 0;
    var colors = d3.scaleOrdinal(d3.schemeCategory10);

    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height"),
        node,
        link;

    svg.append('defs').append('marker')
        .attrs({'id':'arrowhead',
            'viewBox':'-0 -5 10 10',
            'refX':17,
            'refY':0,
            'orient':'auto',
            'markerWidth':radius,
            'markerHeight':radius,
            'markerUnits':"userSpaceOnUse",
            'xoverflow':'visible'})
        .append('svg:path')
        .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
        .attr('fill', '#999')
        .style('stroke','none');
    
    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function (d) {return d.id;}).distance(100).strength(1))
        .force("charge", d3.forceManyBody().strength(-30))
        .force("center", d3.forceCenter(width / 2, height / 2));
    
    d3.json(uuid, function (error, graph) {
        if (error) throw error;
        update(graph.links, graph.nodes);
    })    

    function update(links, nodes) {
        link = svg.selectAll(".link")
            .data(links)
            .enter()
            .append("line")
            .attr("class", "link")
            .attr('marker-end','url(#arrowhead)')
            .attr("stroke-width", function(d) {
             var indexEther = (d.tx).indexOf("ether");
             var size = (d.tx).slice(indexEther+6,(d.tx).length);
             size = Number(size);
             size = 2*(size + 2);
             if (size >8){size = 6;};
             return size;
         })
            .on("mouseover", mouseover2)
            .on("mouseout", mouseout2);
        link.append("title")
            .text(function (d) {return d.tx;});
        edgepaths = svg.selectAll(".edgepath")
            .data(links)
            .enter()
            .append('path')
            .attrs({
                'class': 'edgepath',
                'fill-opacity': 0,
                'stroke-opacity': 0,
                'id': function (d, i) {return 'edgepath' + i}
            })
            .style("pointer-events", "none");
        edgelabels = svg.selectAll(".edgelabel")
            .data(links)
            .enter()
            .append('text')
            .style("pointer-events", "none")
            .attrs({
                'class': 'edgelabel',
                'id': function (d, i) {return 'edgelabel' + i},
                'dy': '8',
                'font-size': 11,
                'fill': 'black'
            });
        node = svg.selectAll(".node")
            .data(nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended)
            );
        node.append("circle")
            .attr("r", radius)
            .attr('id', function (d, i) {return 'circle' + i})
            .attr("class","circle")
            .on("mouseover", mouseover)
            .on("mouseout", mouseout)
            .style("fill", function (d) {return d.fill});
        simulation
            .nodes(nodes)
            .on("tick", ticked);
        simulation.force("link")
            .links(links);
        alpha();
    }

    function alpha(){
        var contador = 0;
        d3.selectAll(".circle").each(function(d, i){
                if(contador == 0){
                    d3.select("#circle0").remove();
                    contador++;
                }
        });
        node.filter(function (o) {return o.index === 0;})
             .append("rect")
             .attr("x", -10)
             .attr("y", -10)
             .attr("width", radius*2)
             .attr("height", radius*2)
             .on("mouseover", mouseoverInit)
             .on("mouseout", mouseoutInit)
             .style("fill", function (d) {return d.fill});
    }
    function mouseoverInit(d){
        if(nodeStatus == 0){
            node.filter(function (o) {return o.index === d.index;})
               .append("text")
               .attr("class", "nodetext")
               .attr("dy", -5)
               .attr("dx", 14)
               .text(function (d) {return d.id;});
       }
       d3.select(".nodeInfo").text(d['id']);
    }
    function mouseover(d){
        d3.select(this).transition()
            .duration(750)
            .attr("r", 2*radius);
        if(nodeStatus == 0){
            node.filter(function (o) {return o.index === d.index;})
               .append("text")
               .attr("class", "nodetext")
               .attr("dy", -5)
               .attr("dx", 14)
               .text(function (d) {return d.id;});
       }
       d3.select(".nodeInfo").text(d['id']);
    }
    function mouseover2(d){
        if(linkStatus == 0){
            edgelabels.filter(function (o) {return o.index === d.index;})
                .append('textPath')
                .attr('xlink:href', '#edgepath' + d.index) //function (d, i) {return '#edgepath' + i}
                .attr("class", "labels")
                .style("text-anchor", "middle")
                .style("pointer-events", "none")
                .attr("startOffset", "50%")
                .text(function (d) {
                    var trans = d.tx;
                    if (trans.length >= 85){
                        trans = trans.slice(0,85);
                    }
                    return trans;
                });
        }
        d3.select(".linkInfo").text(d['tx']);
    }
    function mouseoutInit(){
        if(nodeStatus == 0){
            d3.selectAll(".nodetext").remove();
        }
    }
    function mouseout(){
        d3.select(this).transition()
           .duration(750)
           .attr("r", radius);
        if(nodeStatus == 0){
            d3.selectAll(".nodetext").remove();
        }
    }
    function mouseout2(){
        if(linkStatus == 0){
            d3.selectAll(".labels").remove();
        }
    }
    function linkSelector(){
        if (linkStatus == 0){
            edgelabels.append('textPath')
                .attr('xlink:href', function (d, i) {return '#edgepath' + i;}) //function (d, i) {return '#edgepath' + i}
                .attr("class", "labels")
                .style("text-anchor", "middle")
                .style("pointer-events", "none")
                .attr("startOffset", "50%")
                .text(function (d) {
                    var trans = d.tx;
                    if (trans.length >= 85){
                        trans = trans.slice(0,85);
                    }
                    return trans;
                });
            linkStatus = 1;
        }
        else {
            d3.selectAll(".labels").remove();
            linkStatus = 0;
        }
    }
    function nodeSelector(){
        if (nodeStatus == 0){
            node.append("text")
               .attr("class", "nodetext")
               .attr("dy", -5)
               .attr("dx", 14)
               .text(function (d) {return d.id;});
                nodeStatus = 1;
        }
        else {
            d3.selectAll(".nodetext").remove();
            nodeStatus = 0;
        }
    }
    function ticked() {
        link
            .attr("x1", function (d) {return Math.max(radius, Math.min(width - radius, d.source.x));})
            .attr("y1", function (d) {return Math.max(radius, Math.min(height - radius, d.source.y));})
            .attr("x2", function (d) {return Math.max(radius, Math.min(width - radius, d.target.x));})
            .attr("y2", function (d) {return Math.max(radius, Math.min(height - radius, d.target.y));});
        node
            .attr("transform", function (d) {
                return "translate(" + Math.max(radius, Math.min(width - radius, d.x)) + ", " + Math.max(radius, Math.min(height - radius, d.y)) + ")";                           
            });
        edgepaths.attr('d', function (d) {
            return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
        });
        edgelabels.attr('transform', function (d) {
            if (d.target.x < d.source.x) {
                var bbox = this.getBBox();
                rx = bbox.x + bbox.width / 2;
                ry = bbox.y + bbox.height / 2;
                return 'rotate(180 ' + rx + ' ' + ry + ')';
            }
            else {
                return 'rotate(0)';
            }
        });
    }
    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart()
        d.fx = d.x;
        d.fy = d.y;
    }
    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }
    function dragended(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

</script>

</body>
</html>